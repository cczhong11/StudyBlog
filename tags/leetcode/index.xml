<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leetcode on Learn More</title>
    <link>http://study.tczhong.com/tags/leetcode/</link>
    <description>Recent content in Leetcode on Learn More</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Sep 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://study.tczhong.com/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bit算法题的思考</title>
      <link>http://study.tczhong.com/post/algo/bit/</link>
      <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
      <guid>http://study.tczhong.com/post/algo/bit/</guid>
      <description>&lt;h1 id=&#34;bit操作题目思考&#34;&gt;bit操作题目思考&lt;/h1&gt;&#xA;&lt;p&gt;说实话这类题目比较考验智商，如果之前没有见过的话做出来的难度比较大。基本思路很多都是利用XOR解题&lt;/p&gt;&#xA;&lt;h2 id=&#34;find-bit-parity&#34;&gt;find bit parity&lt;/h2&gt;&#xA;&lt;p&gt;这题就是找奇偶校验位的值，有奇数个1就是1，有偶数个1就是0。在513 datalab出现过，现在在思考感觉没那么难了。基本思路就是把所有的1进行XOR，看最后是1还是0.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 16 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 8 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 4 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 2 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;^=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; 1 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;=&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;找出2个只出现一次的数值&#34;&gt;找出2个只出现一次的数值&lt;/h2&gt;&#xA;&lt;p&gt;这个题目可以全部XOR，得到x XOR y。之后取其中一位，然后把数组分成2部分，一半有这位，一半没有，然后用前两题的思路。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linkedlist算法题的思考</title>
      <link>http://study.tczhong.com/post/algo/linkedlist/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      <guid>http://study.tczhong.com/post/algo/linkedlist/</guid>
      <description>&lt;h1 id=&#34;链表题目的思考&#34;&gt;链表题目的思考&lt;/h1&gt;&#xA;&lt;p&gt;链表是一个比较常见的数据结构，但是leetcode里的题目相对来说不多，题目也不是很难。最重要的思想就是递归的思路。对于每一个节点，都可以看作一个链表的起点。&lt;/p&gt;&#xA;&lt;h2 id=&#34;merge&#34;&gt;merge&lt;/h2&gt;&#xA;&lt;p&gt;这类题目就是用一个递归函数，参数是两个头指针，得到新的指针之后，其中一个向后，然后再递归调用就可以。sort list就是一个merge sort的思想&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/add-two-numbers&#34;&gt;2. Add Two Numbers&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/merge-two-sorted-lists&#34;&gt;21. Merge Two Sorted Lists&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/merge-k-sorted-lists&#34;&gt;23. Merge k Sorted Lists&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/sort-list&#34;&gt;148. Sort List&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;cycle-two-pointers&#34;&gt;cycle, two pointers&lt;/h2&gt;&#xA;&lt;p&gt;判断有没有环的题目可以使用快慢指针，当两个指针重新相遇的时候可以判断出现环。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interval算法题的思考</title>
      <link>http://study.tczhong.com/post/algo/interval/</link>
      <pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate>
      <guid>http://study.tczhong.com/post/algo/interval/</guid>
      <description>&lt;h1 id=&#34;interval-算法题目的思考&#34;&gt;INTERVAL 算法题目的思考&lt;/h1&gt;&#xA;&lt;p&gt;这类题目还是比较常见的。就是给你一些区间，需要你判断重叠之类的。相对来说不难，一些常见的方法是用按start的大小排序，之后end1&amp;lt;start2 就代表有重叠。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/merge-intervals&#34;&gt;56. Merge Intervals&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/insert-interval&#34;&gt;57. Insert Interval&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/find-right-interval&#34;&gt;436. Find Right Interval&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/my-calendar-i&#34;&gt;729. My Calendar I&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/my-calendar-ii&#34;&gt;731. My Calendar II&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/my-calendar-iii&#34;&gt;732. My Calendar III&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/meeting-rooms-ii&#34;&gt;253. Meeting Rooms II&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>DP算法题的思考</title>
      <link>http://study.tczhong.com/post/algo/dp/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      <guid>http://study.tczhong.com/post/algo/dp/</guid>
      <description>&lt;h1 id=&#34;dp-算法题目的思考&#34;&gt;DP 算法题目的思考&lt;/h1&gt;&#xA;&lt;p&gt;dp全称是动态规划，是一类被人又喜欢又讨厌的题目。喜欢是因为找到递推关系之后题目就变得简单了，讨厌的原因是这类题目常常很难想到递推关系。&lt;/p&gt;&#xA;&lt;p&gt;dp的核心思想就是把一个复杂的问题分解成简单的子问题，并且可以利用递推的方式来解决。所有dp题目的核心是：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;递推公式 deduction formula&lt;/li&gt;&#xA;&lt;li&gt;初始化 initialization&lt;/li&gt;&#xA;&lt;li&gt;空间优化 space improvement&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;路径数量&#34;&gt;路径数量&lt;/h2&gt;&#xA;&lt;p&gt;这类题目就是看有几种方式可以到这个点，然后把这几种方式的路径加起来就可以。这是自下而上的思想，对于青蛙跳的那道题也可以自上而下利用递归的思路解题。只要可以跳到，就可以变成一个子问题，把这个点当做起点来进行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Stack算法题的思考</title>
      <link>http://study.tczhong.com/post/algo/stack/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      <guid>http://study.tczhong.com/post/algo/stack/</guid>
      <description>&lt;h1 id=&#34;stack-算法题的思考&#34;&gt;Stack 算法题的思考&lt;/h1&gt;&#xA;&lt;p&gt;这类题目也是比较多的，一般比较繁琐。思路类似DFS，不过可以不使用递归实现。&lt;/p&gt;&#xA;&lt;h2 id=&#34;string-解析类&#34;&gt;String 解析类&lt;/h2&gt;&#xA;&lt;p&gt;这类比较多的就是计算器，以及分析括号里的内容。例如解析 &lt;code&gt;3[a]2[bc]&lt;/code&gt;,这时候就可以在遇到&lt;code&gt;[&lt;/code&gt;的时候把之前的东西都压到栈里，之后当遇到&lt;code&gt;]&lt;/code&gt;的时候把内容再pop出来。&lt;/p&gt;&#xA;&lt;p&gt;对于计算器，如果是后缀表达式的话，可以把结果都压到栈里，遇到运算符再pop出运算。有括号的话还是按括号的方法，主要要注意加法和乘法的区别。&lt;/p&gt;&#xA;&lt;p&gt;计算器系列最重要的思想就是前一个符号看作大小的指示，之后那个才用来做计算。例如&lt;code&gt;(1+2)+(3+4)&lt;/code&gt;, +可以看作是是后一个括号的符号。对于1*2 + 6/3,原理相同。在进行+6/3的时候，先把sign变成+6，并进行除法标记。之后再用除法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Graph算法题的思考</title>
      <link>http://study.tczhong.com/post/algo/graph/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      <guid>http://study.tczhong.com/post/algo/graph/</guid>
      <description>&lt;h1 id=&#34;graph-算法题目思考&#34;&gt;graph 算法题目思考&lt;/h1&gt;&#xA;&lt;p&gt;Graph算是非常常见的题目，一般会给你一个2d array或一个数组代表联系，你可以使用这个输入来转换成一个图表示的数据结构，之后在图里做搜索。常见的算法：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;BFS，DFS&lt;/li&gt;&#xA;&lt;li&gt;union find&lt;/li&gt;&#xA;&lt;li&gt;A*&lt;/li&gt;&#xA;&lt;li&gt;Floyd and dijkstra&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Leetcode里的题目的话主要都是dfs, bfs就可以解决，有些需要思考几个之间的关系的题目可以使用union find来做。少部分计算路径的题目需要使用一些基本的最短路径算法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Array算法题的思考</title>
      <link>http://study.tczhong.com/post/algo/array/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate>
      <guid>http://study.tczhong.com/post/algo/array/</guid>
      <description>&lt;h1 id=&#34;array-算法题的思考&#34;&gt;Array 算法题的思考&lt;/h1&gt;&#xA;&lt;p&gt;数组类的算法是在我做的题目中是最多的，相对来说也是最好理解的它也可以包罗万象，使用各种各样的算法。用数组可以实现很多基本的数据结构。比如heap。所以这部分需要好好掌握。&lt;/p&gt;&#xA;&lt;h2 id=&#34;swap&#34;&gt;SWAP&lt;/h2&gt;&#xA;&lt;p&gt;需要应用到数组元素交换是一类非常常见的题目，比如说求最大的K个数，这种题目一般都是使用基本的快速排序思想。也就是说，我们把这个数组分成两部分，一部分是比当前这个数字大的，另外一部分是比这个当前数字小的，这样我们可以快速的把一个array分成两部分，然后再分别对这两部分进行处理。&lt;/p&gt;&#xA;&lt;p&gt;如果只是需要移动一些数字，比如说移动零或者整个数组只有三个数，那么可以用一些更简单思想，比如说记录下所有非0的数，或者记录下这些数字的个数，然后把前面全换成这些非0数，后面换成零。这样做的好处就是不需要交换。或者一个记录非0的地方，另外一个记录当前位置，如果这个不是零，那么就遇上一个非0的东西交换。所以总体思路都是双指针的思想，一个记录当前遍历的位置，另外一个记录上一次符合条件的位置。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/remove-element&#34;&gt;27. Remove Element&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/sort-colors&#34;&gt;75. Sort Colors&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/move-zeroes&#34;&gt;283. Move Zeroes&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/kth-largest-element-in-an-array&#34;&gt;215. Kth Largest Element in an Array&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;subarray&#34;&gt;subarray&lt;/h2&gt;&#xA;&lt;p&gt;这又是一大类数组常遇到的题目，比如说求子数组的和，或者判断这个子数组是否符合某些规律等等。与字符串处理substring有异曲同工之妙，一般也都是双指针，如果发现和大于某个值的时候，那么就把起始值增大。&lt;/p&gt;</description>
    </item>
    <item>
      <title>String算法题的思考</title>
      <link>http://study.tczhong.com/post/algo/string/</link>
      <pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate>
      <guid>http://study.tczhong.com/post/algo/string/</guid>
      <description>&lt;h1 id=&#34;string-算法思考&#34;&gt;String 算法思考&lt;/h1&gt;&#xA;&lt;p&gt;String 类型的题目算是leetcode里第二多的题型，其实这个和array的使用方法差不太多，只不过其中有一些特定的使用场景。我在这里会将string分为几类问题，可能不能包括所有的类别，尽量使用较为统一的思路解释遇到的题目。&lt;/p&gt;&#xA;&lt;h2 id=&#34;数据类型&#34;&gt;数据类型&lt;/h2&gt;&#xA;&lt;p&gt;首先要说清楚一点，在java中String是immutable的，也就是当你创建一个string后是不能修改的，如果你需要给他加内容，java会重新创一个新的实例。这样的问题就是如果使用&lt;code&gt;s+=a&lt;/code&gt;,这样时间复杂度是O(n),在java中会重新复制一遍string再给你创建。&lt;/p&gt;&#xA;&lt;p&gt;解决办法就是使用StringBuilder，这个的时间复杂度对于增加就是O(1).其中内部实现就是一个char[]&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;sb.append(String str)&lt;/li&gt;&#xA;&lt;li&gt;sb.toString()&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;组合问题&#34;&gt;组合问题&lt;/h2&gt;&#xA;&lt;p&gt;这类问题就是需要得到某个字符串中包含的所有子集,或者是permutation.这类题日非常相似，需要找出符合条件的所有组合。基本思路是样的，可以使用DFS与backtrack实现。例如&#xA;Combination Sum,可以把这题变成一个子问题选择了数字n后，求解sum-n的子问题的解答。所以可以先排序选择第一个元素，然后在函数中记录以下这些：&lt;/p&gt;</description>
    </item>
    <item>
      <title>树形算法题的思考</title>
      <link>http://study.tczhong.com/post/algo/tree/</link>
      <pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate>
      <guid>http://study.tczhong.com/post/algo/tree/</guid>
      <description>&lt;h1 id=&#34;树形算法题的思考&#34;&gt;树形算法题的思考&lt;/h1&gt;&#xA;&lt;p&gt;树形是一大题型，这类题目相对来说比较简单，在我看来掌握树形的最大要点就是递归的思想，这可以说用在了这类题目中的方方面面。主要涉及这些题型：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;构建树（数组，链表）&lt;/li&gt;&#xA;&lt;li&gt;遍历，判断是合理的树&lt;/li&gt;&#xA;&lt;li&gt;找节点（LCA）&lt;/li&gt;&#xA;&lt;li&gt;树的基本属性（高度），找路径&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;构建树&#34;&gt;构建树&lt;/h2&gt;&#xA;&lt;p&gt;这类题目的基本思路就是先找到根结点（root），然后把整个数组或者链表分成左右两个部分。之后，这个根节点的左子树就是递归调用数组的右半部分。右半边子树就是递归调用，这个函数的右半部分。总体还是比较简单的，题目可以参看&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/&#34;&gt;108.Convert Sorted Array to Binary Search Tree&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/&#34;&gt;109.Convert Sorted List to Binary Search Tree&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这里有一道题，关于如何利用链表来构造。其中有一点，它可以使用一个固定的prev linked list node。在每次递归结束的时候都会调用next，这样我们就不需要每次遍历找到中心结点，而是利用之前的结果来找到中间的那个节点。也就是说，在这里我们并不需要一开始就把父节点找到，而是可以先存好左子树，之后再到root。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
